/**
 * Created by andyk on 23/05/2017.
 */

import {ComponentFixture, TestBed} from '@angular/core/testing';
import {DebugElement} from '@angular/core';
import {IconComponent} from './icon.component';
import {LogService} from '@ironsource/fusion-ui/services/log';
import {HttpClient} from "@angular/common/http";
import {Observable, of} from "rxjs";
import {HttpClientTestingModule} from "@angular/common/http/testing";

const dataMock: string =
    '<?xml version="1.0" encoding="UTF-8"?><svg width="32px" height="32px" viewBox="0 0 32 32" version="1.1"' +
    ' xmlns="http://www.w3.org/2000/svg"  xmlns:xlink="http://www.w3.org/1999/xlink"><!-- Generator: Sketch 41.2 (35397) -' +
    ' http://www.bohemiancoding.com/sketch  --><title>anchor</title><desc>Created with Sketch.</desc><defs></defs><g' +
    ' id="**Fusion-Icons-Set**" stroke="none"  stroke-width="1" fill="none" fill-rule="evenodd"><g id="Set-icons-fusion"' +
    ' transform="translate(-1120.000000, -2816.000000)"  fill="#172D4C"><path d="M1151.8959,2838.81712 L1149.33507,2834.11673' +
    ' L1149.14769,2833.77432 C1149.04359,2833.6083 1148.88744,2833.50454 1148.67925,2833.46304 C1148.59597,2833.44228' +
    ' 1148.50748,2833.43709 1148.41379,2833.44747 C1148.3201,2833.45785 1148.23162,2833.49416 1148.14834,2833.55642' +
    ' L1147.83604,2833.74319 L1147.83604,2833.77432 L1143.27651,2836.8249  C1143.17241,2836.88716 1143.08913,2836.98054' +
    ' 1143.02668,2837.10506 C1142.96422,2837.22957 1142.93299,2837.35408 1142.93299,2837.4786 C1142.93299,2837.60311' +
    ' 1142.96422,2837.72763 1143.02668,2837.85214 L1143.24528,2838.07004 C1143.32856,2838.23606 1143.4743,2838.32944' +
    ' 1143.6825,2838.35019 C1143.8907,2838.37095 1144.07807,2838.32944 1144.24463,2838.22568 L1146.96161,2836.35798' +
    ' C1146.64932,2838.93127 1145.55629,2841.11543 1143.6825,2842.91051 C1141.80871,2844.70559 1139.58101,2845.72763' +
    ' 1136.99935,2845.97665 L1136.99935,2825.99222 L1140.99675,2825.99222 C1141.26741,2825.99222 1141.50163,2825.89365' +
    ' 1141.69941,2825.6965 C1141.8972,2825.49935 1141.9961,2825.26589 1141.9961,2824.99611 C1141.9961,2824.72633 1141 8972,2824.49287' +
    ' 1141.69941,2824.29572 C1141.50163,2824.09857 1141.26741,2824 1140.99675,2824 L1136.96812,2824 L1136.93689,2823.96887' +
    ' L1136.93689,2823.93774 C1137.83214,2823.70947 1138.57124,2823.23217 1139.1542,2822.50584 C1139.73715,2821.7795' +
    ' 1140.02863,2820.94942 1140.02863,2820.01556 C1140.02863,2818.91569 1139.63826,2817.97147 1138.85751,2817.18288' +
    ' C1138.07677,2816.39429 1137.12948,2816 1136.01561,2816 C1134.90175,2816 1133.94926,2816.39429 1133.1581,2817.18288' +
    ' C1132.36694,2817.97147 1131.97137,2818.91569 1131.97137,2820.01556 C1131.97137,2820.94942 1132.26285,2821.7795' +
    ' 1132.8458,2822.50584 C1133.42876,2823.23217 1134.16786,2823.69909 1135.06311,2823.90661 L1135.06311,2823.96887 L1135.03188,2824' +
    ' L1131.00325,2824 C1130.73259,2824 1130.49837,2824.09857 1130.30059,2824.29572 C1130.1028,2824.49287 1130.0039,2824.72633' +
    ' 1130.0039,2824.99611 C1130.0039,2825.26589 1130.1028,2825.49935 1130.30059,2825.6965 C1130.49837,2825.89365 1130.73259,2825.99222' +
    ' 1131.00325,2825.99222 L1135.00065,2825.99222 L1135.00065,2845.97665 C1132.41899,2845.72763 1130.1965,2844.71077' +
    ' 1128.33312,2842.92607 C1126.46974,2841.14137 1125.3715,2838.95202 1125.03839,2836.35798 L1127.75537,2838.22568' +
    ' C1127.92193,2838.32944 1128.1093,2838.37095 1128.3175,2838.35019 C1128.5257,2838.32944 1128.67144,2838.23606 1128.75472,2838.07004' +
    ' L1128.97332,2837.85214 C1129.01496,2837.76913 1129.04099,2837.67575 1129.0514,2837.57198 C1129.06181,2837.46822' +
    ' 1129.0566,2837.36965 1129.03578,2837.27626 C1129.01496,2837.18288 1128.97853,2837.09468 1128.92648,2837.01167' +
    ' C1128.87443,2836.92866 1128.80677,2836.86641 1128.72349,2836.8249 L1124.16396,2833.74319 L1123.85166,2833.55642' +
    ' C1123.6851,2833.43191 1123.50813,2833.40078 1123.32075,2833.46304 C1123.21666,2833.48379 1123.12817,2833.5201 1123.0553,2833.57198' +
    ' C1122.98243,2833.62387 1122.91477,2833.69131 1122.85231,2833.77432 L1122.66493,2834.11673 L1120.1041,2838.81712 C1120,2839.00389' +
    ' 1119.97398,2839.19585 1120.02602,2839.393 C1120.07807,2839.59014 1120.18738,2839.7406 1120.35394,2839.84436 L1120.635,2839.96887' +
    ' C1120.80156,2840.07263 1120.97853,2840.0882 1121.16591,2840.01556 C1121.35329,2839.94293 1121.49902,2839.81323' +
    ' 1121.60312,2839.62646 L1123.10215,2836.85603 C1123.56018,2840.0519 1125.01235,2842.70816 1127.45869,2844.8249' +
    ' C1129.90502,2846.94164 1132.7521,2848 1136,2848 C1139.2479,2848 1142.09498,2846.94164 1144.54131,2844.8249 C1146.98765,2842.70816' +
    ' 1148.43982,2840.0519 1148.89785,2836.85603 L1150.39688,2839.62646 C1150.50098,2839.81323 1150.64671,2839.94293' +
    ' 1150.83409,2840.01556 C1151.02147,2840.0882 1151.19844,2840.07263 1151.365,2839.96887 L1151.64606,2839.84436 C1151.81262,2839.7406' +
    ' 1151.92193,2839.59014 1151.97398,2839.393 C1152.02602,2839.19585 1152,2839.00389 1151.8959,2838.81712 Z M1134.0013,2820.01556' +
    ' C1134.0013,2819.45525 1134.19909,2818.97795 1134.59466,2818.58366 C1134.99024,2818.18936 1135.46389,2817.99222' +
    ' 1136.01561,2817.99222 C1136.56734,2817.99222 1137.04619,2818.18936 1137.45218,2818.58366 C1137.85817,2818.97795' +
    ' 1138.06116,2819.45525 1138.06116,2820.01556 C1138.06116,2820.24384 1138.02472,2820.45655 1137.95185,2820.6537' +
    ' C1137.87898,2820.85084 1137.78009,2821.03242 1137.65517,2821.19844 C1137.53025,2821.36446 1137.38452,2821.50973' +
    ' 1137.21796,2821.63424 C1137.0514,2821.75876 1136.86402,2821.85733 1136.65582,2821.92996 C1136.44762,2822.00259' +
    ' 1136.22902,2822.03891 1136,2822.03891 C1135.83344,2822.03891 1135.66168,2822.01297 1135.48471,2821.96109 C1135.30774,2821.90921' +
    ' 1135.14639,2821.84176 1135.00065,2821.75875 C1134.85491,2821.67575 1134.71958,2821.57199 1134.59466,2821.44747' +
    ' C1134.46975,2821.32296 1134.36044,2821.18807 1134.26675,2821.0428 C1134.17306,2820.89753 1134.1054,2820.73671' +
    ' 1134.06376,2820.56031 C1134.02212,2820.38392 1134.0013,2820.20234 1134.0013,2820.01556 Z" id="anchor">' +
    '</path></g></g></svg>';

class MockApiService {
    get(): Observable<any> {
        return of(dataMock);
    }
}

describe('IconComponent', () => {
    let component: IconComponent;
    let fixture: ComponentFixture<IconComponent>;
    let debugEl: DebugElement;
    let el: HTMLElement;

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [HttpClientTestingModule],
            declarations: [IconComponent],
            providers: [LogService, {provide: HttpClient, useClass: MockApiService}]
        });

        fixture = TestBed.createComponent(IconComponent);
        component = fixture.componentInstance;
        component.name = 'arrow';
        debugEl = fixture.debugElement;
        el = debugEl.nativeElement;
    });

    it('Must exist', () => {
        expect(component).toBeTruthy();
    });

    it('Must have assets URL path to icons', () => {
        // const urlPath = `${environment.assetsPath}/icons/arrow.svg`;
        expect(component.getUrlPath()).toEqual('arrow.svg');
    });

    it('Must call ngAfterViewInit method', () => {
        const spyAfterInit = spyOn(component, 'loadSvg');
        fixture.detectChanges();
        expect(spyAfterInit.calls.any()).toBe(true);
    });

    it(`Must have correct SVG tags in it's DOM element`, () => {
        fixture.detectChanges();
        const innerCode = el.innerHTML;
        expect(innerCode).toContain('<svg');
        expect(innerCode).toContain('</svg>');
        expect(innerCode).toContain('<path');
        expect(innerCode).toContain('</path>');
    });
});
